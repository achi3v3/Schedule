package funcExcel

import (
	"context"
	"fmt"
	"log"
	"sync"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const (
	Welcome = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
)

type Step int

const (
	StepCourse Step = iota
	StepGroup
	StepDay
	StepSchedule
)

type UserState struct {
	Step   Step
	Course string
	Group  string
	Day    string
}

var userStates = struct {
	sync.RWMutex
	data map[int64]*UserState
}{data: make(map[int64]*UserState)}

func getUserState(chatID int64) *UserState {
	userStates.RLock()
	defer userStates.RUnlock()
	if state, exists := userStates.data[chatID]; exists {
		return state
	}
	return nil
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func setUserState(chatID int64, state *UserState) {
	userStates.Lock()
	defer userStates.Unlock()
	userStates.data[chatID] = state
}

func Start(ctx context.Context, b *bot.Bot, update *models.Update) {
	setUserState(update.Message.Chat.ID, &UserState{Step: StepCourse})
	// –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤
	courses, _ := getAllSheets()
	fmt.Println(courses)

	// courses := []string{"1 –ö—É—Ä—Å", "2 –ö—É—Ä—Å", "3 –ö—É—Ä—Å", "4 –ö—É—Ä—Å", "5 –ö—É—Ä—Å", "6 –ö—É—Ä—Å"}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫—É—Ä—Å–æ–≤
	var keyboardRows [][]models.InlineKeyboardButton
	for _, course := range courses {
		callbackData := renameSheetGroup(course)
		keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
			{Text: course, CallbackData: callbackData},
		})
	}
	if len(courses) == 0 {
		callbackData := "error"
		keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
			{Text: "–û–®–ò–ë–ö–ê", CallbackData: callbackData},
		})
	}
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫—É—Ä—Å–∞
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
		ReplyMarkup: keyboard,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// setUserState(update.Message.Chat.ID, &UserState{})
	sendCourseSelection(ctx, b, update.Message.Chat.ID)
}
func UniversalHandler(ctx context.Context, b *bot.Bot, update *models.Update) {

	callbackQuery := update.CallbackQuery
	message := callbackQuery.Message.Message
	chatID := message.Chat.ID
	callbackData := callbackQuery.Data

	// –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
	state := getUserState(chatID)
	if state == nil {
		state = &UserState{}
		setUserState(chatID, state)
	}

	// –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
	switch state.Step {
	case StepCourse:
		state.Course = callbackData
		state.Step = StepGroup
		setUserState(chatID, state)
		sendGroupSelection(ctx, b, chatID, state)

	case StepGroup:
		state.Group = callbackData
		state.Step = StepDay
		setUserState(chatID, state)
		sendDaySelection(ctx, b, chatID)

	case StepDay:
		state.Day = callbackData
		state.Step = StepSchedule
		setUserState(chatID, state)

		schedule := getSchedule(state.Course, state.Group, state.Day, state)
		sendSchedule(ctx, b, chatID, schedule)
	default:
		log.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞–≥–∞")
	}
	// state := getUserState(chatID)
	// if state == nil {
	// 	state = &UserState{}
	// 	setUserState(chatID, state)
	// }

	// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
	// if callbackData == "back" {
	// 	if state.Day != "" {
	// 		// –ï—Å–ª–∏ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è, –æ–±–Ω—É–ª—è–µ–º –¥–µ–Ω—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
	// 		state.Day = ""
	// 		sendGroupSelection(ctx, b, chatID, state)
	// 	} else if state.Group != "" {
	// 		// –ï—Å–ª–∏ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã, –æ–±–Ω—É–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
	// 		state.Group = ""
	// 		sendCourseSelection(ctx, b, chatID)

	// 	}
	// 	return
	// }

	// // –ï—Å–ª–∏ –∫—É—Ä—Å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
	// if state.Course == "" {
	// 	state.Course = callbackData
	// 	setUserState(chatID, state)
	// 	sendGroupSelection(ctx, b, chatID, state)
	// 	return
	// }

	// // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
	// if state.Group == "" {
	// 	state.Group = callbackData
	// 	setUserState(chatID, state)
	// 	sendDaySelection(ctx, b, chatID)
	// 	return
	// }

	// // –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	// if state.Day == "" {
	// 	state.Day = callbackData
	// 	setUserState(chatID, state)

	// 	var keyboardRows [][]models.InlineKeyboardButton

	// 	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	// 	keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
	// 		{Text: "–ù–∞–∑–∞–¥", CallbackData: "back"},
	// 	})

	// 	keyboard := &models.InlineKeyboardMarkup{
	// 		InlineKeyboard: keyboardRows,
	// 	}

	// 	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	// 	schedule := getSchedule(state.Course, state.Group, state.Day, state) // –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	// 	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
	// 		ChatID:      chatID,
	// 		Text:        schedule,
	// 		ReplyMarkup: keyboard,
	// 		ParseMode:   models.ParseModeHTML,
	// 	})
	// 	if err != nil {
	// 		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	// 	}
	// 	return
	// }
}
func sendCourseSelection(ctx context.Context, b *bot.Bot, chatID int64) {
	// courses := []string{"1 –ö—É—Ä—Å", "2 –ö—É—Ä—Å", "3 –ö—É—Ä—Å", "4 –ö—É—Ä—Å", "5 –ö—É—Ä—Å", "6 –ö—É—Ä—Å"}
	courses, _ := getAllSheets()

	var keyboardRows [][]models.InlineKeyboardButton
	for _, course := range courses {
		callbackData := renameSheetGroup(course)
		keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
			{Text: course, CallbackData: callbackData},
		})
	}

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatID,
		Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
		ReplyMarkup: keyboard,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func sendSchedule(ctx context.Context, b *bot.Bot, chatID int64, schedule string) {
	var keyboardRows [][]models.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
		{Text: "–ù–∞–∑–∞–¥", CallbackData: "back"},
	})

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatID,
		Text:        schedule,
		ReplyMarkup: keyboard,
		ParseMode:   models.ParseModeHTML,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", err)
	}
}

func sendGroupSelection(ctx context.Context, b *bot.Bot, chatID int64, state *UserState) {
	fmt.Println(state.Course)
	groups, _ := getGroupsByCourse(state.Course)
	fmt.Println(groups) // –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
	var keyboardRows [][]models.InlineKeyboardButton
	for _, group := range groups {
		callbackData := (group)
		keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
			{Text: replaceLatinWithCyrillic(group), CallbackData: callbackData},
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
		{Text: "–ù–∞–∑–∞–¥", CallbackData: "back"},
	})

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatID,
		Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
		ReplyMarkup: keyboard,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// sendDaySelection –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
func sendDaySelection(ctx context.Context, b *bot.Bot, chatID int64) {
	days := []string{"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
	var keyboardRows [][]models.InlineKeyboardButton
	for _, day := range days {
		callbackData := day
		keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
			{Text: day, CallbackData: callbackData},
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
		{Text: "–ù–∞–∑–∞–¥", CallbackData: "back"},
	})

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatID,
		Text:        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
		ReplyMarkup: keyboard,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func getGroupsForCourse(course string) []string {
	switch course {
	case "kurs1":
		return []string{"–ì—Ä—É–ø–ø–∞ 1", "–ì—Ä—É–ø–ø–∞ 2", "–ì—Ä—É–ø–ø–∞ 3"}
	case "kurs2":
		return []string{"–ì—Ä—É–ø–ø–∞ –ê", "–ì—Ä—É–ø–ø–∞ –ë", "–ì—Ä—É–ø–ø–∞ –í"}
	default:
		return []string{"–ì—Ä—É–ø–ø–∞ X", "–ì—Ä—É–ø–ø–∞ Y"}
	}
}

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func getSchedule(course, group, day string, state *UserState) string {

	allrangetime := []string{
		"08.00-09.20",
		"09.35-10.55",
		"11.35-12.55",
		"13.10-14.30",
		"15.10-16.30",
		"16.45-18.05",
		"18.20-19.40",
		"18.20-19.40",
		"19.55-21.15",
	}

	fmt.Println(state)
	GlobalWeek := "17"
	startcoupleString := fmt.Sprintf("üèõ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ <a href=\"https://t.me/sn_schedulebot\">Schedule Bot</a> (‚öôÔ∏è –ë–µ—Ç–∞-–≤–µ—Ä—Å–∏—è)\nüìÜ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –Ω–µ–¥–µ–ª—è: %s\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ì—Ä—É–ø–ø–∞: %s\n\nüìÖ %s\n\n", GlobalWeek, state.Course, state.Group, state.Day)
	coupleList := FunctionDataBaseTableData(state.Course, state.Group, state.Day)
	coupleString, flagConcatenateAuditory, flagConcatenateTeacher := "", "", ""
	for i := 0; i < len(coupleList); i++ {
		numberCoupleTime := 0
		CoupleTime := coupleList[i][1]
		if contains(allrangetime, CoupleTime) {
			numberCoupleTime = findIndex(allrangetime, CoupleTime) + 1
		}
		CoupleSubject := coupleList[i][2]
		CoupleAuditory := coupleList[i][3]
		CoupleTeacher := coupleList[i][4]
		CoupleWeeks := coupleList[i][5]
		if flagConcatenateAuditory != "" {
			CoupleAuditory = fmt.Sprintf("%s / %s", CoupleAuditory, flagConcatenateAuditory)
			flagConcatenateAuditory = ""
		}
		if flagConcatenateTeacher != "" {
			CoupleTeacher = fmt.Sprintf("%s / %s", CoupleTeacher, flagConcatenateTeacher)
			flagConcatenateTeacher = ""
		}
		if i+1 < len(coupleList) {
			if CoupleTime == coupleList[i+1][1] && CoupleSubject == coupleList[i+1][2] {
				if CoupleTeacher == coupleList[i+1][4] && CoupleAuditory != coupleList[i+1][3] {
					flagConcatenateAuditory = CoupleAuditory
					continue
				} else if CoupleTeacher != coupleList[i+1][4] && CoupleAuditory != coupleList[i+1][3] {
					flagConcatenateAuditory = CoupleAuditory
					flagConcatenateTeacher = CoupleTeacher
					continue
				} else if CoupleTeacher != coupleList[i+1][4] && CoupleAuditory == coupleList[i+1][3] {
					flagConcatenateTeacher = CoupleTeacher
					continue
				}
			}
		}
		if CoupleWeeks != "‚Äî" {
			coupleString += fmt.Sprintf("<blockquote><b>%s</b> <i>(%d –ø–∞—Ä–∞)\n</i>    üìì <i>%s</i>\n    üóù <i>%s</i>\n    ü™™ <i>%s</i>\n    üîç <i>%s</i></blockquote>\n", CoupleTime, numberCoupleTime, CoupleSubject, removeBrackets(CoupleAuditory), CoupleTeacher, removeBrackets(CoupleWeeks))
		} else {
			coupleString += fmt.Sprintf("<blockquote><b>%s</b> <i>(%d –ø–∞—Ä–∞)\n</i>    üìì <i>%s</i>\n    üóù <i>%s</i>\n    ü™™ <i>%s</i></blockquote>\n", CoupleTime, numberCoupleTime, CoupleSubject, removeBrackets(CoupleAuditory), CoupleTeacher)

		}
	}

	coupleString = startcoupleString + coupleString

	return coupleString
}
