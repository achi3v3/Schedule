package functions

import (
	"context"
	"fmt"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const (
	start           = "/start"
	snstartSchedule = "/snstart_schedule"
	uploadFile      = "/snupload_schedule"
	mygroup         = "/sn_mygroup"
	unPinGroup      = "/snunpin_group"

	idOwner = 5266257091
)

func isSnStartSchedule(update *models.Update) bool {
	return update.Message != nil && update.Message.Text == snstartSchedule
}
func snStartSchedule(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatID := update.Message.Chat.ID

	if isSpamming(chatID) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "üí¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å –º–æ–ª–æ–¥–æ–π..",
		})
		return
	}
	sendCourseSelectionWitoutEdit(ctx, b, chatID)

	userStates.Lock()
	if _, exists := userStates.data[chatID]; !exists {
		userStates.data[chatID] = make(map[string]string)
	}
	userStates.Unlock()

	setUserState(chatID, "course", "")
	setUserState(chatID, "group", "")
	setUserState(chatID, "day", "")

	userId := update.Message.Chat.ID
	username := update.Message.From.Username
	firstname := update.Message.From.FirstName
	flag := addUser(userId, username, firstname)
	if flag {
		if username == "" {
			username = "none"
		}
		if firstname == "" {
			firstname = "none"
		}
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    idOwner,
			Text:      fmt.Sprintf("<b>‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n<blockquote>id: %d</blockquote>\nusername: @%s\n<blockquote>firstname: %s</blockquote>\n", userId, username, firstname),
			ParseMode: models.ParseModeHTML,
		})
	}
}
func isUploadFile(update *models.Update) bool {
	return update.Message != nil && update.Message.Text == uploadFile
}
func snUploadFile(ctx context.Context, b *bot.Bot, update *models.Update) {

	chatID := update.Message.Chat.ID
	if isSpamming(chatID) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "üí¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å –º–æ–ª–æ–¥–æ–π..",
		})
		return
	}
	if chatID != idOwner {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "üîû –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.",
		})
		return
	}
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    chatID,
		Text:      "‚ú≥Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n<blockquote>–§–∞–π–ª: <i>File.xlsx</i></blockquote>\n<blockquote>–ù–µ–¥–µ–ª—è: <i>17</i></blockquote>",
		ParseMode: models.ParseModeHTML,
	})

	userStates.Lock()
	if _, exists := userStates.data[chatID]; !exists {
		userStates.data[chatID] = make(map[string]string)
	}
	userStates.Unlock()
}
func isMyGroup(update *models.Update) bool {
	return update.Message != nil && update.Message.Text == mygroup
}
func snMyGroup(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatID := update.Message.Chat.ID
	if isSpamming(chatID) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "üí¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å –º–æ–ª–æ–¥–æ–π..",
		})
		return
	}
	course, group, err := GetUserCourseAndGroup(ctx, chatID)
	if err != nil {
		fmt.Printf("PinGroup: %s\n", err)
	}
	if course != "" && group != "" {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    chatID,
			Text:      fmt.Sprintf("ü™™ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞:\n<blockquote>–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ì—Ä—É–ø–ø–∞: %s</blockquote>", course, group),
			ParseMode: models.ParseModeHTML,
		})
		setUserState(chatID, "course", course)
		setUserState(chatID, "group", group)

		state := getUserState(chatID)
		sendDaySelectionWithoutEdit(ctx, b, chatID, state)
	} else {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    chatID,
			Text:      "‚≠ïÔ∏è –ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø–∞..",
			ParseMode: models.ParseModeHTML,
		})
		sendCourseSelectionWitoutEdit(ctx, b, chatID)
	}
}
func isStart(update *models.Update) bool {
	return update.Message != nil && update.Message.Text == start
}
func Start(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatID := update.Message.Chat.ID
	if isSpamming(chatID) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "üí¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å –º–æ–ª–æ–¥–æ–π..",
		})
		return
	}
	b.SendMessage(ctx, &bot.SendMessageParams{
		Text:      fmt.Sprintf("üèõ <a href=\"https://t.me/sn_schedulebot\">Schedule Bot</a> (‚öôÔ∏è –°—Ç–∞–¥–∏—è-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)\n\n‚ÑπÔ∏è –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî %s\n\nüë®‚Äçüë©‚Äçüë¶‚Äçüë¶ –ú–æ—è –≥—Ä—É–ø–ø–∞ ‚Äî %s\n<i>1. –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞\n2. ¬´–ó–∞–∫—Ä–µ–ø–∏—Ç—å –≥—Ä—É–ø–ø—É¬ª –º–æ–∂–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã –Ω–∞–∂–∞–≤</i>\n\nüöÆ –û—Ç–∫—Ä–µ–ø–∏—Ç—å –≥—Ä—É–ø–ø—É ‚Äî %s\n\nüÜï –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî %s\n<i>1. –û–∂–∏–¥–∞–µ—Ç—Å—è —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª + –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç(–Ω–µ–¥–µ–ª—è)\n2. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</i>", snstartSchedule, mygroup, unPinGroup, uploadFile),
		ChatID:    chatID,
		ParseMode: models.ParseModeHTML,
	})
}
func isUnPin(update *models.Update) bool {
	return update.Message != nil && update.Message.Text == unPinGroup
}
func snUnPinGroup(ctx context.Context, b *bot.Bot, update *models.Update) {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID
	if isSpamming(chatID) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "üí¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å –º–æ–ª–æ–¥–æ–π..",
		})
		return
	}
	_, err := PinGroup(ctx, userID, "", "")
	if err != nil {
		fmt.Printf("UnPinGroup: %s\n", err)
	}
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    chatID,
		Text:      "ü™™ –í–∞—à–∞ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã:\n<blockquote>–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: \n–ì—Ä—É–ø–ø–∞: </blockquote>",
		ParseMode: models.ParseModeHTML,
	})
}
