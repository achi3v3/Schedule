package functions

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const (
	UpArrow   = "üîù"
	DownArrow = "üîª"
)

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π // –†–ê–ó–î–ï–õ–ò–¢–¨ –ù–ê –ù–ï–°–ö–û–õ–¨–ö–û –§–£–ù–ö–¶–ò–ô
func UniversalHandler(ctx context.Context, b *bot.Bot, update *models.Update) {

	if update == nil {
		log.Println("Update is nil")
		return
	}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ (Chat –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–º, –ø–æ—ç—Ç–æ–º—É nil-–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞)

	if update.Message != nil {
		if update.Message.Document != nil {
			if update.Message.From.ID == idOwner {
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: update.Message.Chat.ID,
					Text:   "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
				})
				handleDocument(ctx, b, update)

			} else {
				sendNotPermisions(ctx, b, update.Message.Chat.ID)
			}
			return
		}
		if update.Message.Text != "" {
			if strings.Contains(strings.ToLower(update.Message.Text), "–¥–æ–±–∞–≤–∏—Ç—å") {
				deleteUserMessageID(update.Message.Chat.ID)
				userID := update.Message.From.ID
				chatID := update.Message.Chat.ID
				if IsRedactorsByUserID(userID) || idOwner == userID {
					state := getUserState(userID)
					course, group := getPermCourseGroupByUserID(userID)
					if state["course"] == course && state["group"] == group {
						if state["day"] == "" {
							deleteUserMessageID(update.Message.Chat.ID)
							b.SendMessage(ctx, &bot.SendMessageParams{
								ChatID: chatID,
								Text:   "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
							})
							sendDaySelection(ctx, b, chatID, state)
							return
						}
						student := update.Message.From.Username
						if student == "" {
							student = fmt.Sprintf("id: %d", userID)
						} else {
							student = fmt.Sprintf("@%s", student)
						}
						notice := parseSchedule(update.Message.Text)
						msg := PinsByStarost(state["course"], state["group"], state["day"], notice["time"], notice["event"], notice["auditory"], notice["teacher"], notice["weeks"], student, true, userID)
						if msg != "" {
							sendOnlyMessage(ctx, b, chatID, msg)
						} else {
							sendError(ctx, b, chatID)
						}
						deleteUserMessageID(update.Message.Chat.ID)
					} else if state["course"] != "" && state["group"] != "" {
						var keyboardRows [][]models.InlineKeyboardButton
						keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
							{Text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥—Ä—É–ø–ø–µ", CallbackData: "–ì—Ä—É–ø–ø–∞"},
						})

						keyboard := &models.InlineKeyboardMarkup{
							InlineKeyboard: keyboardRows,
						}
						msg := fmt.Sprintf("<b>‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –≤:</b><blockquote>%s / %s</blockquote>\n\n<i>–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Ç—É—Ç:</i>\n<blockquote>–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ö—É—Ä—Å: %s</blockquote>", state["course"], state["group"], course, group)

						sendEditMessage(ctx, b, chatID, msg, keyboard)
					} else {
						var keyboardRows [][]models.InlineKeyboardButton
						keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
							{Text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥—Ä—É–ø–ø–µ", CallbackData: "–ì—Ä—É–ø–ø–∞"},
						})

						keyboard := &models.InlineKeyboardMarkup{
							InlineKeyboard: keyboardRows,
						}
						msg := fmt.Sprintf("<b>‚õîÔ∏è –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø–∞!</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:</i>\n<blockquote>–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ö—É—Ä—Å: %s</blockquote>", course, group)
						sendEditMessage(ctx, b, chatID, msg, keyboard)
					}
				} else {
					sendNotPermisions(ctx, b, update.Message.Chat.ID)
				}
				return
			}
			if IsAdminByUserID(update.Message.From.ID) || idOwner == update.Message.From.ID {
				setOwnerMessageText(update.Message.Text)
				deleteUserMessageID(update.Message.Chat.ID)
				MessageUserID, err := extractUserIDFromMessage()
				if err != nil {
					sendError(ctx, b, update.Message.Chat.ID)
					fmt.Println("error", update.Message.Text)
				} else {
					sendUpdatePermisions(ctx, b, update.Message.From.ID, MessageUserID)
				}
				return
			}
		}
	}
	if update.CallbackQuery == nil {
		log.Println("CallbackQuery is nil")
		return
	}

	callbackQuery := update.CallbackQuery
	message := callbackQuery.Message.Message
	chatID := message.Chat.ID
	callbackData := callbackQuery.Data
	userID := callbackQuery.From.ID

	if isSpamming(chatID) {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "üí¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å –º–æ–ª–æ–¥(–æ–π)–∞—è..",
		})
		return
	}

	state := getUserState(chatID)
	if state == nil {
		userStates.Lock()
		userStates.data[chatID] = make(map[string]string)
		userStates.Unlock()
		state = getUserState(chatID)
	}

	if callbackData == "home" {
		sendStart(ctx, b, chatID)
		return
	} else if callbackData == "–°–¥–µ–ª–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º" {
		if IsAdminByUserID(userID) || idOwner == userID {
			setredactorID, err := extractUserIDFromMessage()
			if setredactorID == userID {
				b.SendMessage(ctx, &bot.SendMessageParams{
					Text:   "–ù–∏—Ö—É—è.. —Å–∞–º —Å–µ–±–µ —Ä–æ–ª–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç)",
					ChatID: chatID,
				})
			}
			if err != nil {
				fmt.Println("error", callbackData)
			} else {
				addRedactor(ctx, setredactorID)
				sendNotifyRole(ctx, b, userID, setredactorID, UpArrow, "¬´–†–µ–¥–∞–∫—Ç–æ—Ä¬ª")
				sendAddRole(ctx, b, setredactorID, "–†–µ–¥–∞–∫—Ç–æ—Ä")
			}
			sendUpdatePermisions(ctx, b, chatID, setredactorID)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–£–±—Ä–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞" {
		if IsAdminByUserID(userID) || idOwner == userID {
			setredactorID, err := extractUserIDFromMessage()
			if err != nil {
				fmt.Println("error", callbackData)
			} else {
				deleteRedactor(ctx, setredactorID)
				sendNotifyRole(ctx, b, userID, setredactorID, DownArrow, "¬´–†–µ–¥–∞–∫—Ç–æ—Ä¬ª")
				sendDeleteRole(ctx, b, setredactorID, "–†–µ–¥–∞–∫—Ç–æ—Ä")
			}
			sendUpdatePermisions(ctx, b, chatID, setredactorID)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º" {
		if userID == idOwner {
			setredactorID, err := extractUserIDFromMessage()
			if err != nil {
				fmt.Println("error", callbackData)
			} else {
				setRoleAdmin(ctx, setredactorID, true)
				sendNotifyRole(ctx, b, userID, setredactorID, UpArrow, "¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª")
				sendAddRole(ctx, b, setredactorID, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
			}
			sendUpdatePermisions(ctx, b, chatID, setredactorID)
		} else if IsAdminByUserID(userID) || idOwner == userID {
			setredactorID, err := extractUserIDFromMessage()
			if err != nil {
				fmt.Println("error", callbackData)
			} else {
				sendRequestForSetRoleAdmin(ctx, b, chatID, userID, setredactorID)
			}
			sendUpdatePermisions(ctx, b, chatID, setredactorID)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É" {
		if userID == idOwner {
			setredactorID, err := extractUserIDFromMessage()
			if err != nil {
				fmt.Println("error", callbackData)
			} else {
				setRoleAdmin(ctx, setredactorID, false)
				sendNotifyRole(ctx, b, userID, setredactorID, DownArrow, "¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª")
				sendDeleteRole(ctx, b, setredactorID, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
			}
			sendUpdatePermisions(ctx, b, chatID, setredactorID)
		} else {
			setredactorID, err := extractUserIDFromMessage()
			if err != nil {
				fmt.Println("error", callbackData)
			} else {
				sendNotifyRole(ctx, b, userID, setredactorID, DownArrow, "¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª")
				sendNotPermisions(ctx, b, chatID)
			}
		}
		return
	} else if callbackData == "back" {
		if state["day"] != "" && state["group"] != "" && state["course"] != "" {
			deleteUserState(chatID, "day")
			sendDaySelection(ctx, b, chatID, state)
		} else if state["group"] != "" && state["course"] != "" {
			deleteUserState(chatID, "day")
			deleteUserState(chatID, "group")
			sendGroupSelection(ctx, b, chatID, state)
		} else if state["course"] != "" {
			sendCourseSelection(ctx, b, chatID, true)
		}
		return

	} else if callbackData == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" {
		sendCourseSelection(ctx, b, chatID, true)
		return
	} else if callbackData == "–ú–æ—è –≥—Ä—É–ø–ø–∞" {
		course, group, err := GetUserCourseAndGroup(ctx, chatID)
		if course != "" && group != "" && err == nil {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID:    chatID,
				Text:      fmt.Sprintf("‚úÖ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:\n<blockquote>–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ì—Ä—É–ø–ø–∞: %s</blockquote>", course, group),
				ParseMode: models.ParseModeHTML,
			})
			setUserState(chatID, "course", course)
			setUserState(chatID, "group", group)
			state := getUserState(chatID)

			sendDaySelection(ctx, b, chatID, state)
		} else {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID:    chatID,
				Text:      "‚≠ïÔ∏è –ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø–∞.. –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
				ParseMode: models.ParseModeHTML,
			})
		}
		return
	} else if callbackData == "–û—Ç–∫—Ä–µ–ø–∏—Ç—å –≥—Ä—É–ø–ø—É" {
		_, err := PinGroup(ctx, userID, "", "")
		if err != nil {
			fmt.Println("error", callbackData)
			return
		}
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:    chatID,
			Text:      "ü™™ –í–∞—à–∞ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã:\n<blockquote>–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: \n–ì—Ä—É–ø–ø–∞: </blockquote>",
			ParseMode: models.ParseModeHTML,
		})

		return
	} else if callbackData == "–£–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–º" {
		if IsRedactorsByUserID(userID) || userID == idOwner {
			sendRedactorPanel(ctx, b, chatID)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª" {
		if userID == idOwner {
			nameFileSlice, _ := getExcelName()
			nameFile := nameFileSlice[0]
			fileLocate := "./uploaded_files"
			sendFile(b, chatID, fileLocate, nameFile)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" {
		sendInfo(ctx, b, chatID)
		return
	} else if callbackData == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–∏—Å—Ç" {
		if IsAdminByUserID(userID) || idOwner == userID {
			sendAdminInfo(ctx, b, chatID)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" {
		if IsAdminByUserID(userID) || idOwner == userID {
			sendControPanel(ctx, b, chatID)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return

	} else if callbackData == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏" {
		if IsRedactorsByUserID(userID) || idOwner == userID {
			sendMyNotices(ctx, b, chatID, userID, 0)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if strings.Contains(callbackData, "–ú–æ–∏ –∑–∞–ø–∏—Å–∏:") {
		if IsAdminByUserID(userID) || userID == idOwner {
			ind := strings.Index(callbackData, ":")
			page, err := strconv.Atoi(callbackData[ind+1:])
			if err == nil {
				sendMyNotices(ctx, b, chatID, userID, page)
			}
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏" {
		if IsAdminByUserID(userID) || idOwner == userID {
			setredactorID, err := extractUserIDFromMessage()
			if err != nil {
				fmt.Println("error", callbackData)
			} else {
				sendNoticesByUserID(ctx, b, chatID, setredactorID, 0)
			}
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if strings.Contains(callbackData, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏:") {
		if IsAdminByUserID(userID) || userID == idOwner {
			setredactorID, err := extractUserIDFromMessage()
			if err != nil {
				fmt.Println("error", callbackData)
			} else {
				ind := strings.Index(callbackData, ":")
				page, err := strconv.Atoi(callbackData[ind+1:])
				if err == nil {
					sendNoticesByUserID(ctx, b, chatID, setredactorID, page)
				}
			}
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" {
		setredactorID, err := extractUserIDFromMessage()
		if err != nil {
			fmt.Println("error", callbackData)
		} else {
			if IsAdminByUserID(userID) || idOwner == userID {
				sendUpdatePermisions(ctx, b, chatID, setredactorID)
			} else {
				sendNotPermisions(ctx, b, chatID)
			}
		}
		return
	} else if callbackData == "–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" {
		if IsAdminByUserID(userID) || idOwner == userID {
			setredactorID, err := extractUserIDFromMessage()
			if err != nil {
				fmt.Println("error", callbackData)
			}
			err = deleteNoticessByUserID(setredactorID)
			if err == nil {
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID,
					Text:   fmt.Sprintf("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã", setredactorID),
				})
				sendNoticesByUserID(ctx, b, chatID, setredactorID, 0)
			} else {
				fmt.Println("error", callbackData)
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID,
					Text:   fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %v", err),
				})
			}
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏" {
		err := deleteNoticessByUserID(userID)
		if err == nil {
			msg := "‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã"
			sendOnlyMessage(ctx, b, chatID, msg)
		} else {
			fmt.Println("error", callbackData)
			sendError(ctx, b, chatID)
		}
		sendMyNotices(ctx, b, chatID, userID, 0)
		return
	} else if callbackData == "–ì—Ä—É–ø–ø–∞" {
		course, group := getPermCourseGroupByUserID(userID)

		if course != "" && group != "" {
			setUserState(chatID, "course", course)
			setUserState(chatID, "group", group)
			state := getUserState(chatID)

			sendDaySelection(ctx, b, chatID, state)
		} else {
			msg := "‚≠ïÔ∏è –ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø–∞.. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
			sendOnlyMessage(ctx, b, chatID, msg)
		}
		return

	} else if callbackData == "–†–µ–¥–∞–∫—Ç–æ—Ä—ã" {
		if userID == idOwner {
			sendGetRedactors(ctx, b, chatID, 0)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if strings.Contains(callbackData, "–†–µ–¥–∞–∫—Ç–æ—Ä—ã:") {
		if IsAdminByUserID(userID) || userID == idOwner {
			ind := strings.Index(callbackData, ":")
			page, err := strconv.Atoi(callbackData[ind+1:])
			if err == nil {
				sendGetRedactors(ctx, b, chatID, page)
			}
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã" {
		if IsAdminByUserID(userID) || userID == idOwner {
			sendGetAdmins(ctx, b, chatID, 0)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if strings.Contains(callbackData, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:") {
		if IsAdminByUserID(userID) || userID == idOwner {
			ind := strings.Index(callbackData, ":")
			page, err := strconv.Atoi(callbackData[ind+1:])
			if err == nil {
				sendGetAdmins(ctx, b, chatID, page)
			}
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" {
		sendUsers(ctx, b, chatID, 0)
		return
	} else if strings.Contains(callbackData, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:") {
		ind := strings.Index(callbackData, ":")
		page, err := strconv.Atoi(callbackData[ind+1:])
		if err == nil {
			sendUsers(ctx, b, chatID, page)
		}
		return
	} else if callbackData == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" {
		if userID == idOwner {
			sendUploadFile(ctx, b, chatID)
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if callbackData == "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –≥—Ä—É–ø–ø—É" {
		if state["course"] != "" && state["group"] != "" {
			msg, err := PinGroup(ctx, userID, state["course"], state["group"])
			if err == nil {
				sendOnlyMessage(ctx, b, chatID, msg)
			} else {
				msg = "üí¢ –ì—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.."
				sendOnlyMessage(ctx, b, chatID, msg)
			}
		} else {
			msg := "üí¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º."
			sendOnlyMessage(ctx, b, chatID, msg)
			// –ë–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			sendCourseSelection(ctx, b, chatID, false)
		}
		return
	} else if callbackData == "–î–æ–±–∞–≤–∏—Ç—å" {
		if IsRedactorsByUserID(userID) || idOwner == userID {
			course, group := getPermCourseGroupByUserID(userID)
			if course == "" || group == "" {
				msg := "‚≠ïÔ∏è –ó–∞ –≤–∞–º–∏ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø–∞.. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
				sendOnlyMessage(ctx, b, chatID, msg)
			} else if state["course"] != course || state["group"] != group {
				var keyboardRows [][]models.InlineKeyboardButton
				keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
					{Text: "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥—Ä—É–ø–ø–µ", CallbackData: "–ì—Ä—É–ø–ø–∞"},
				})

				keyboard := &models.InlineKeyboardMarkup{
					InlineKeyboard: keyboardRows,
				}
				msg := fmt.Sprintf("<b>‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –≤:</b><blockquote>%s / %s</blockquote>\n\n<i>–£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —Ç—É—Ç:</i>\n<blockquote>–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ö—É—Ä—Å: %s</blockquote>", state["course"], state["group"], course, group)

				sendEditMessage(ctx, b, chatID, msg, keyboard)
			} else if state["course"] != "" && state["group"] != "" && state["day"] != "" {
				username := callbackQuery.From.Username
				if username == "" {
					username = fmt.Sprintf("id: %d", userID)
				} else {
					username = fmt.Sprintf("@%s", username)
				}
				msg := fmt.Sprintf("<b>‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏</b> by %s\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: <u>%s</u>\n–ì—Ä—É–ø–ø–∞: <u>%s</u>\n–î–µ–Ω—å: <u>%s</u>\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏:\n<blockquote>1 –í—Ä–µ–º—è\n2 –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n3 –ê—É–¥–∏—Ç–æ—Ä–∏—è\n4 –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n5 –ù–µ–¥–µ–ª–∏</blockquote></i>\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n<blockquote><i>–î–æ–±–∞–≤–∏—Ç—å\n1 15.11-15.11\n2 –°–¥–∞—á–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –§–∏–∑–∏–∫–µ\n3 –∞—É–¥. 666\n</i></blockquote>\n<i>–ú–æ–∂–µ—Ç–µ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—É–Ω–∫—Ç—ã (4, 5) –ø—Ä–æ–ø—É—â–µ–Ω—ã - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –æ–Ω–∏ –±—É–¥—É—Ç –ø—É—Å—Ç—ã–µ\n–í–ê–ñ–ù–û: —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <u><b>¬´–î–æ–±–∞–≤–∏—Ç—å¬ª</b></u> –∏ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.</i>", username, state["course"], state["group"], state["day"])
				sendOnlyMessage(ctx, b, chatID, msg)
			} else {
				msg := "üí¢ –ö—É—Ä—Å/–≥—Ä—É–ø–ø–∞/–¥–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.."
				sendOnlyMessage(ctx, b, chatID, msg)
			}
		} else {
			sendNotPermisions(ctx, b, chatID)
		}
		return
	} else if state["course"] == "" && state["group"] == "" && state["day"] == "" {
		setUserState(chatID, "course", callbackData)
		sendGroupSelection(ctx, b, chatID, state)
		return
	} else if state["group"] == "" && state["day"] == "" {
		setUserState(chatID, "group", callbackData)
		sendDaySelection(ctx, b, chatID, state)
		return
	} else {
		setUserState(chatID, "day", callbackData)
		schedule := getSchedule(state)
		sendSchedule(ctx, b, chatID, schedule, state)
		return
	}
}

func databaseHandler() {
	// =============================================POSTGRESQL==============================================
	connStr := "user=postgres password=password sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %s", err)
	}
	defer db.Close()
	createFilesTable(db)
	createTableUsers(db)
	createDataBasesExcel(db)
	// ==============================================FOLDER==============================================
	saveDir := "uploaded_files"
	if _, err := os.Stat(saveDir); os.IsNotExist(err) {
		err := os.Mkdir(saveDir, 0755)
		if err != nil {
			log.Printf("Failed to create directory: %v", err)
		}
	}
}
