package functions

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"sync"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const (
	// Common message parts
	botHeader = "üèõ <a href=\"https://t.me/sn_schedulebot\">Schedule Bot</a> ‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (‚öôÔ∏è –ë–µ—Ç–∞-–≤–µ—Ä—Å–∏—è)"
	weekInfo  = "üìÜ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –Ω–µ–¥–µ–ª—è: %s"

	// Course and group info
	courseInfo = "\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s"
	groupInfo  = "\n–ì—Ä—É–ø–ø–∞: %s"

	// Page info
	pageInfo = "\n\n<i>–õ–∏—Å—Ç %d:</i>"

	// Common buttons
	backButton = "–ù–∞–∑–∞–¥"

	// Page sizes
	pageSize        = 8
	pageSizeNotices = 3
)

var userLastAction = struct {
	sync.RWMutex
	data map[int64]time.Time
}{
	data: make(map[int64]time.Time),
}

func getWeek() string {
	nameFileSlice, _ := getExcelName()
	GlobalWeek := nameFileSlice[1]
	return GlobalWeek
}

const actionCooldown = 800 * time.Millisecond

func isSpamming(userID int64) bool {
	userLastAction.Lock()
	defer userLastAction.Unlock()

	now := time.Now()
	lastAction, exists := userLastAction.data[userID]

	if exists && now.Sub(lastAction) < actionCooldown {
		return true
	}

	userLastAction.data[userID] = now
	return false
}
func sendCourseSelection(ctx context.Context, b *bot.Bot, chatID int64, edit bool) {
	resetUserState(chatID)
	msg := fmt.Sprintf("%s\n%s\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è:", botHeader, fmt.Sprintf(weekInfo, getWeek()))

	if edit {
		sendEditMessage(ctx, b, chatID, msg, CourseSelection())
	} else {
		sentMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        msg,
			ReplyMarkup: CourseSelection(),
			ParseMode:   models.ParseModeHTML,
		})
		if err != nil {
			fmt.Printf("%s %v", errorSendMsg, err)
		}
		setUserMessageID(chatID, sentMsg.ID)
	}
}

func sendSchedule(ctx context.Context, b *bot.Bot, chatID int64, schedule string, state map[string]string) {
	prevday, nextday := getAdjacentDays(state["day"])
	sendEditMessage(ctx, b, chatID, schedule, ScheduleKeyboard(prevday, nextday))
}
func sendGroupSelection(ctx context.Context, b *bot.Bot, chatID int64, state map[string]string) {
	msg := fmt.Sprintf("%s\n%s\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
		botHeader,
		fmt.Sprintf(weekInfo, getWeek()),
		state["course"])
	sendEditMessage(ctx, b, chatID, msg, GroupSelection(state["course"]))
}
func sendDaySelection(ctx context.Context, b *bot.Bot, chatID int64, state map[string]string) {
	msg := fmt.Sprintf("%s\n%s\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ì—Ä—É–ø–ø–∞: %s\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
		botHeader,
		fmt.Sprintf(weekInfo, getWeek()),
		state["course"],
		state["group"])
	sendEditMessage(ctx, b, chatID, msg, DaySelection())
}

type Schedule struct {
	Time    string
	Subject string
	Teacher string
	Room    string
	Weeks   string
	Student string
}

func convertToSchedule(couple []string) Schedule {
	schedule := Schedule{
		Time:    couple[1],
		Subject: couple[2],
		Room:    couple[3],
		Teacher: couple[4],
		Weeks:   couple[5],
	}
	if len(couple) > 6 {
		schedule.Student = couple[6]
	}
	return schedule
}
func (s Schedule) getPairNumber() string {
	allrangetime := []string{
		"08.00-09.20",
		"09.35-10.55",
		"11.35-12.55",
		"13.10-14.30",
		"15.10-16.30",
		"16.45-18.05",
		"18.20-19.40",
		"18.20-19.40",
		"19.55-21.15",
	}

	if idx := findIndex(allrangetime, s.Time); idx != -1 {
		return fmt.Sprintf("%d", idx+1)
	}
	return "x"
}
func (s Schedule) HasStudent() bool {
	return s.Student != ""
}

func (s Schedule) FormatMessage() string {
	if s.HasStudent() {
		return fmt.Sprintf("<blockquote><b>%s</b> <i>(by %s)\n</i>    üìì <i>%s</i>\n    üóù <i>%s</i>\n    ü™™ <i>%s</i></blockquote>\n",
			s.Time, s.Student, s.Subject, s.Room, s.Teacher)
	}
	return fmt.Sprintf("<blockquote><b>%s</b> <i>(%s –ø–∞—Ä–∞)\n</i>    üìì <i>%s</i>\n    üóù <i>%s</i>\n    ü™™ <i>%s</i></blockquote>\n",
		s.Time, s.getPairNumber(), s.Subject, s.Room, s.Teacher)
}

func getSchedule(state map[string]string) string {
	startcoupleString := fmt.Sprintf("%s\n%s\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ì—Ä—É–ø–ø–∞: %s\n\n<b>%s</b>\n\n",
		botHeader,
		fmt.Sprintf(weekInfo, getWeek()),
		state["course"],
		state["group"],
		state["day"])

	coupleList := FunctionDataBaseTableData(renameSheetGroup(state["course"]), renameSheetGroup(state["group"]), state["day"])
	var schedules []Schedule

	// Convert raw data to Schedule structs and handle concatenation
	for i := 0; i < len(coupleList); i++ {
		schedule := convertToSchedule(coupleList[i])

		// Check if we need to concatenate with next entry
		if i+1 < len(coupleList) {
			nextSchedule := convertToSchedule(coupleList[i+1])
			if schedule.Time == nextSchedule.Time && schedule.Subject == nextSchedule.Subject {
				if schedule.Teacher == nextSchedule.Teacher && schedule.Room != nextSchedule.Room {
					schedule.Room = fmt.Sprintf("%s / %s", schedule.Room, nextSchedule.Room)
					i++ // Skip next entry
				} else if schedule.Teacher != nextSchedule.Teacher && schedule.Room != nextSchedule.Room {
					schedule.Room = fmt.Sprintf("%s / %s", schedule.Room, nextSchedule.Room)
					schedule.Teacher = fmt.Sprintf("%s / %s", schedule.Teacher, nextSchedule.Teacher)
					i++ // Skip next entry
				} else if schedule.Teacher != nextSchedule.Teacher && schedule.Room == nextSchedule.Room {
					schedule.Teacher = fmt.Sprintf("%s / %s", schedule.Teacher, nextSchedule.Teacher)
					i++ // Skip next entry
				}
			}
		}

		schedules = append(schedules, schedule)
	}

	// Format all schedules
	var coupleString string
	for _, schedule := range schedules {
		coupleString += schedule.FormatMessage()
	}

	return startcoupleString + coupleString
}
func NoticeSendDaySelection(ctx context.Context, b *bot.Bot, chatID int64, course, group string) {

	var keyboardRows [][]models.InlineKeyboardButton
	days := []string{"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
	row := []models.InlineKeyboardButton{}

	for i, day := range days {
		row = append(row, models.InlineKeyboardButton{Text: day, CallbackData: day})

		if (i+1)%3 == 0 || i == len(days)-1 {
			keyboardRows = append(keyboardRows, row)
			row = []models.InlineKeyboardButton{}
		}
	}

	if len(row) > 0 {
		keyboardRows = append(keyboardRows, row)
	}

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}

	msg := fmt.Sprintf("%s\n%s\n%s%s%s\n<b>‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", botHeader, getWeek(), courseInfo, groupInfo, weekInfo)

	sendEditMessage(ctx, b, chatID, msg, keyboard)
}

func sendFile(b *bot.Bot, chatID int64, folderPath, fileName string) error {
	filePath := filepath.Join(folderPath, fileName)

	file, err := os.Open(filePath)
	if err != nil {
		logError(err, "sendFile: –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞")
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª %s: %w", filePath, err)
	}
	defer file.Close()

	ctx := context.Background()

	_, err = b.SendDocument(ctx, &bot.SendDocumentParams{
		ChatID: chatID,
		Document: &models.InputFileUpload{
			Filename: fileName,
			Data:     file,
		},
		Caption: "üìÇ –≠–∫—Å–µ–ª—å-—Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
	})
	if err != nil {
		logError(err, "sendFile: –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
		return fmt.Errorf("%w", err)
	}

	return nil
}

func sendStart(ctx context.Context, b *bot.Bot, chatID int64) {
	msg := fmt.Sprintf("%s\n\nüìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", botHeader)
	sendEditMessage(ctx, b, chatID, msg, StartKeyboard())
}
func sendControPanel(ctx context.Context, b *bot.Bot, chatID int64) {
	msg := fmt.Sprintf("%s\n\n<b>üìá –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n", botHeader)
	sendEditMessage(ctx, b, chatID, msg, ControlPanelKeyboard())
}
func sendNotPermisions(ctx context.Context, b *bot.Bot, chatID int64) {
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
	})
}
func sendError(ctx context.Context, b *bot.Bot, chatID int64) {
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   "‚ùå –û—à–∏–±–∫–∞!",
	})
}
func sendRedactorPanel(ctx context.Context, b *bot.Bot, chatID int64) {
	msg := fmt.Sprintf("%s\n\nüìù <b>–ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞</b>\n\n", botHeader)
	sendEditMessage(ctx, b, chatID, msg, RedactorPanelKeyboard())
}
func sendMyNotices(ctx context.Context, b *bot.Bot, chatID, userID int64, page int) {
	course, group := getPermCourseGroupByUserID(userID)
	notices := GetPinsByUserID(course, group, userID)
	noticesList := ""

	if len(notices) != 0 {
		totalNotices := len(notices)
		start := page * pageSizeNotices
		end := start + pageSizeNotices
		if end > totalNotices {
			end = totalNotices
		}
		if start >= totalNotices {
			return
		}

		for _, notice := range notices[start:end] {
			noticesList += notice
		}
	}

	msg := fmt.Sprintf("%s\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ì—Ä—É–ø–ø–∞: %s\n\nüìù <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ (%d)</b>%s\n%s",
		botHeader,
		course,
		group,
		userID,
		fmt.Sprintf(pageInfo, page+1),
		noticesList)
	sendEditMessage(ctx, b, chatID, msg, NoticesKeyboard(page, len(notices), true))
}
func sendNoticesByUserID(ctx context.Context, b *bot.Bot, chatID, userID int64, page int) {

	course, group := getPermCourseGroupByUserID(userID)
	notices := GetPinsByUserID(course, group, userID)
	noticesList := ""

	if len(notices) != 0 {
		totalNotices := len(notices)
		start := page * pageSizeNotices
		end := start + pageSizeNotices
		if end > totalNotices {
			end = totalNotices
		}
		if start >= totalNotices {
			return
		}

		for _, notice := range notices[start:end] {
			noticesList += notice
		}
	}

	msg := fmt.Sprintf("<b>üî∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b> %d\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ì—Ä—É–ø–ø–∞: %s\n\nüìù <b>–ó–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>%s\n%s",
		userID,
		course,
		group,
		fmt.Sprintf(pageInfo, page+1),
		noticesList)
	sendEditMessage(ctx, b, chatID, msg, NoticesKeyboard(page, len(notices), false))
}
func sendGetRedactors(ctx context.Context, b *bot.Bot, chatID int64, page int) {
	redactors := GetRedactorsByUserID()
	totalUsers := len(redactors)

	start := page * pageSize
	end := start + pageSize
	if end > totalUsers {
		end = totalUsers
	}
	if start >= totalUsers {
		return
	}
	var keyboardRows [][]models.InlineKeyboardButton

	if page > 0 || end < totalUsers {
		var navButtons []models.InlineKeyboardButton
		if page > 0 {
			navButtons = append(navButtons, models.InlineKeyboardButton{
				Text: "–ü—Ä–µ–¥—ã–¥—É—â–∏–π", CallbackData: "–†–µ–¥–∞–∫—Ç–æ—Ä—ã:" + strconv.Itoa(page-1),
			})
		}
		if end < totalUsers {
			navButtons = append(navButtons, models.InlineKeyboardButton{
				Text: "–°–ª–µ–¥—É—é—â–∏–π", CallbackData: "–†–µ–¥–∞–∫—Ç–æ—Ä—ã:" + strconv.Itoa(page+1),
			})
		}
		if len(navButtons) > 0 {
			keyboardRows = append(keyboardRows, navButtons)
		}
	}
	keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
		{Text: backButton, CallbackData: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"},
	})
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}

	userList := ""
	for _, user := range redactors[start:end] {
		userList += user
	}

	msg := fmt.Sprintf("%s\n\nüìù <b>–†–µ–¥–∞–∫—Ç–æ—Ä—ã</b>\n%s", botHeader, userList)
	sendEditMessage(ctx, b, chatID, msg, keyboard)
}
func sendGetAdmins(ctx context.Context, b *bot.Bot, chatID int64, page int) {
	admins := GetAdmins()
	totalUsers := len(admins)

	start := page * pageSize
	end := start + pageSize
	if end > totalUsers {
		end = totalUsers
	}
	if start >= totalUsers {
		return
	}
	var keyboardRows [][]models.InlineKeyboardButton

	if page > 0 || end < totalUsers {
		var navButtons []models.InlineKeyboardButton
		if page > 0 {
			navButtons = append(navButtons, models.InlineKeyboardButton{
				Text: "–ü—Ä–µ–¥—ã–¥—É—â–∏–π", CallbackData: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:" + strconv.Itoa(page-1),
			})
		}
		if end < totalUsers {
			navButtons = append(navButtons, models.InlineKeyboardButton{
				Text: "–°–ª–µ–¥—É—é—â–∏–π", CallbackData: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:" + strconv.Itoa(page+1),
			})
		}
		if len(navButtons) > 0 {
			keyboardRows = append(keyboardRows, navButtons)
		}
	}
	keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
		{Text: backButton, CallbackData: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"},
	})
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}

	userList := ""
	for _, user := range admins[start:end] {
		userList += user
	}
	msg := fmt.Sprintf("%s\n\nüé´  <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b>\n%s", botHeader, userList)
	sendEditMessage(ctx, b, chatID, msg, keyboard)
}
func sendUsers(ctx context.Context, b *bot.Bot, chatID int64, page int) {
	users := GetUsersAll()
	totalUsers := len(users)

	start := page * pageSize
	end := start + pageSize
	if end > totalUsers {
		end = totalUsers
	}
	if start >= totalUsers {
		return
	}
	var keyboardRows [][]models.InlineKeyboardButton

	if page > 0 || end < totalUsers {
		var navButtons []models.InlineKeyboardButton
		if page > 0 {
			navButtons = append(navButtons, models.InlineKeyboardButton{
				Text: "–ü—Ä–µ–¥—ã–¥—É—â–∏–π", CallbackData: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:" + strconv.Itoa(page-1),
			})
		}
		if end < totalUsers {
			navButtons = append(navButtons, models.InlineKeyboardButton{
				Text: "–°–ª–µ–¥—É—é—â–∏–π", CallbackData: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:" + strconv.Itoa(page+1),
			})
		}
		if len(navButtons) > 0 {
			keyboardRows = append(keyboardRows, navButtons)
		}
	}
	keyboardRows = append(keyboardRows, []models.InlineKeyboardButton{
		{Text: backButton, CallbackData: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"},
	})
	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: keyboardRows,
	}

	userList := ""
	for _, user := range users[start:end] {
		userList += user
	}
	msg := fmt.Sprintf("%s\n\n<i>‚úèÔ∏è ‚Äî –†–µ–¥–∞–∫—Ç–æ—Ä\nüé´ ‚Äî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</i>\n\nüìù <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n%s", botHeader, userList)
	sendEditMessage(ctx, b, chatID, msg, keyboard)
}
func sendUploadFile(ctx context.Context, b *bot.Bot, chatID int64) {
	msg := fmt.Sprintf("%s\n\n‚ú≥Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n<blockquote>–§–∞–π–ª: <i>File.xlsx</i></blockquote>\n<blockquote>–ù–µ–¥–µ–ª—è: <i>17</i></blockquote>", botHeader)
	sendEditMessage(ctx, b, chatID, msg, BackKeyboard("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"))
}
func sendInfo(ctx context.Context, b *bot.Bot, chatID int64) {
	msg := fmt.Sprintf("%s\n\nüìÉ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–∏—Å—Ç</b>\n\n<blockquote><i>    –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å Excel-—Ñ–∞–π–ª–∞.</i>\n\n    <b>ü™™ –ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞</b> ‚Äî <u>–ü–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</u> <i>(–µ—Å–ª–∏ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –∏–º –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É)</i>.\n\n    <b>üìÇ –≠–∫—Å–µ–ª—å-—Ñ–∞–π–ª</b> ‚Äî –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–µ–ª—å-—Ñ–∞–π–ª, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª–∏ —Å—á–∏—Ç–∞–Ω—ã –Ω–µ–¥–µ–ª—è –∏ –¥–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n\n    <b>‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> ‚Äî <u>–ü–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</u>.\n\n    <b>üßæ –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî –í –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º, –æ—Ç–Ω–æ—Å—è—â–∏–º—Å—è –∫ –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—É.</blockquote>", botHeader)
	sendEditMessage(ctx, b, chatID, msg, BackKeyboard("home"))
}
func sendUpdatePermisions(ctx context.Context, b *bot.Bot, chatID, userID int64) {
	course, group := CourseGroupByUserID(userID)
	var roles string

	if IsRedactorsByUserID(userID) {
		roles += "–†–µ–¥–∞–∫—Ç–æ—Ä"
	}
	if IsAdminByUserID(userID) {
		if roles != "" {
			roles += " / –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
		} else {
			roles += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
		}
	}

	msg := fmt.Sprintf("<b>üî∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b> %d\n\n–£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: %s\n–ì—Ä—É–ø–ø–∞: %s\n–†–æ–ª–∏: %s\n",
		userID,
		course,
		group,
		roles)
	sendEditMessage(ctx, b, chatID, msg, UserPermissionsKeyboard(IsRedactorsByUserID(userID), IsAdminByUserID(userID)))
}
func sendRequestForSetRoleAdmin(ctx context.Context, b *bot.Bot, chatID, WhoID, userID int64) {
	msgUser := fmt.Sprintf("%s\n\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n<blockquote><i>–í—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d</i></blockquote>", botHeader, userID)
	sendOnlyMessage(ctx, b, chatID, msgUser)
	msgOwner := fmt.Sprintf("%s\n\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n<blockquote>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –ø—Ä–æ—Å–∏—Ç –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª –¥–ª—è %d</blockquote>", botHeader, WhoID, userID)
	sendOnlyMessage(ctx, b, idOwner, msgOwner)
}

func sendAddRole(ctx context.Context, b *bot.Bot, userID int64, role string) {
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    userID,
		Text:      fmt.Sprintf("%s\n\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n<blockquote>–í–∞–º –Ω–∞–∑–Ω–∞—á–∏–ª–∏ —Ä–æ–ª—å ¬´<i>%s</i>¬ª</blockquote>", botHeader, role),
		ParseMode: models.ParseModeHTML,
	})
	if err != nil {
		logError(err, "sendAddRole: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
		msg := fmt.Sprintf("\n\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n<blockquote>–î–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ –¥–æ—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</blockquote>", userID)
		sendOnlyMessage(ctx, b, idOwner, msg)
	}
}

func sendDeleteRole(ctx context.Context, b *bot.Bot, userID int64, role string) {
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    userID,
		Text:      fmt.Sprintf("%s\n\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n<blockquote>–£ –≤–∞—Å –æ—Ç–æ–±—Ä–∞–ª–∏ —Ä–æ–ª—å ¬´<i>%s</i>¬ª</blockquote>", botHeader, role),
		ParseMode: models.ParseModeHTML,
	})
	if err != nil {
		logError(err, "sendDeleteRole: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
		msg := fmt.Sprintf("\n\n<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n<blockquote>–î–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ –¥–æ—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</blockquote>", userID)
		sendOnlyMessage(ctx, b, idOwner, msg)
	}
}

func sendAdminInfo(ctx context.Context, b *bot.Bot, chatID int64) {
	msg := fmt.Sprintf("%s\n\nüìÉ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–∏—Å—Ç</b>\n\n<blockquote>‚ÑπÔ∏è –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–≤–µ–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <i>(id –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –≤ —Å–∫–æ–±–∫–∞—Ö –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)</i>\n\n‚ÑπÔ∏è ¬´–°–¥–µ–ª–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º¬ª ‚Äî —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä–æ—é –æ–Ω –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ —Å–º–æ–∂–µ—Ç –≤–Ω–æ—Å–∏—Ç—å –∑–∞–ø–∏—Å–∏.\n\n‚ÑπÔ∏è ¬´–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º¬ª ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª.\n\n‚ÑπÔ∏è ¬´–£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É¬ª ‚Äî –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n‚ÑπÔ∏è ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª ‚Äî –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.</blockquote>", botHeader)
	sendEditMessage(ctx, b, chatID, msg, BackKeyboard("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"))
}

func sendEditMessage(ctx context.Context, b *bot.Bot, chatID int64, msg string, keyboard *models.InlineKeyboardMarkup) {
	messageID, exists := getUserMessageID(chatID)

	if !exists {
		sentMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        msg,
			ReplyMarkup: keyboard,
			ParseMode:   models.ParseModeHTML,
		})
		if err != nil {
			logError(err, "sendEditMessage: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
		}
		setUserMessageID(chatID, sentMsg.ID)
	} else {
		err := editMessage(ctx, b, chatID, messageID, msg, keyboard)
		if err != nil {
			sentMsg, err := b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID:      chatID,
				Text:        msg,
				ReplyMarkup: keyboard,
				ParseMode:   models.ParseModeHTML,
			})
			if err != nil {
				logError(err, "sendEditMessage: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
			}
			setUserMessageID(chatID, sentMsg.ID)
		}
	}
}

func sendOnlyMessage(ctx context.Context, b *bot.Bot, chatID int64, msg string) {
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    chatID,
		Text:      msg,
		ParseMode: models.ParseModeHTML,
	})
}

func sendNotifyRole(ctx context.Context, b *bot.Bot, userID, setUserID int64, symbol, Text string) {
	msg := fmt.Sprintf("üîî %d:\n<blockquote>%d %s %s</blockquote>", userID, setUserID, symbol, Text)
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    idOwner,
		Text:      msg,
		ParseMode: models.ParseModeHTML,
	})
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
func logError(err error, context string) {
	if err != nil {
		log.Printf("[ERROR] %s: %v", context, err)
	}
}
